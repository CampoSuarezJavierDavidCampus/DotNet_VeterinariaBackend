// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApiContext))]
    [Migration("20231006160944_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Core.Entities.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_Cita")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("Fecha");

                    b.Property<int>("PetId")
                        .HasColumnType("int")
                        .HasColumnName("ID_MascotaFk");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Motivo");

                    b.Property<int>("VeterinarianId")
                        .HasColumnType("int")
                        .HasColumnName("ID_VeterinarioFk");

                    b.HasKey("Id");

                    b.HasIndex("PetId");

                    b.HasIndex("VeterinarianId");

                    b.ToTable("Cita", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2023, 7, 12, 15, 9, 44, 341, DateTimeKind.Local).AddTicks(9184),
                            PetId = 4,
                            Reason = "vacunacion",
                            VeterinarianId = 2
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2023, 3, 31, 15, 9, 44, 341, DateTimeKind.Local).AddTicks(9208),
                            PetId = 5,
                            Reason = "infeccion",
                            VeterinarianId = 2
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateTime(2023, 4, 22, 15, 9, 44, 341, DateTimeKind.Local).AddTicks(9210),
                            PetId = 4,
                            Reason = "infeccion",
                            VeterinarianId = 1
                        },
                        new
                        {
                            Id = 4,
                            Date = new DateTime(2023, 7, 5, 11, 9, 44, 341, DateTimeKind.Local).AddTicks(9211),
                            PetId = 3,
                            Reason = "infeccion",
                            VeterinarianId = 2
                        },
                        new
                        {
                            Id = 5,
                            Date = new DateTime(2022, 12, 5, 12, 9, 44, 341, DateTimeKind.Local).AddTicks(9212),
                            PetId = 5,
                            Reason = "vacunacion",
                            VeterinarianId = 2
                        },
                        new
                        {
                            Id = 6,
                            Date = new DateTime(2022, 10, 8, 13, 9, 44, 341, DateTimeKind.Local).AddTicks(9215),
                            PetId = 5,
                            Reason = "terapia",
                            VeterinarianId = 2
                        },
                        new
                        {
                            Id = 7,
                            Date = new DateTime(2022, 10, 22, 9, 9, 44, 341, DateTimeKind.Local).AddTicks(9217),
                            PetId = 3,
                            Reason = "terapia",
                            VeterinarianId = 2
                        },
                        new
                        {
                            Id = 8,
                            Date = new DateTime(2023, 9, 20, 14, 9, 44, 341, DateTimeKind.Local).AddTicks(9218),
                            PetId = 5,
                            Reason = "infeccion",
                            VeterinarianId = 1
                        },
                        new
                        {
                            Id = 9,
                            Date = new DateTime(2023, 2, 2, 15, 9, 44, 341, DateTimeKind.Local).AddTicks(9219),
                            PetId = 3,
                            Reason = "infeccion",
                            VeterinarianId = 1
                        },
                        new
                        {
                            Id = 10,
                            Date = new DateTime(2023, 2, 23, 15, 9, 44, 341, DateTimeKind.Local).AddTicks(9221),
                            PetId = 2,
                            Reason = "vacunacion",
                            VeterinarianId = 2
                        },
                        new
                        {
                            Id = 11,
                            Date = new DateTime(2023, 8, 24, 9, 9, 44, 341, DateTimeKind.Local).AddTicks(9222),
                            PetId = 2,
                            Reason = "vacunacion",
                            VeterinarianId = 1
                        },
                        new
                        {
                            Id = 12,
                            Date = new DateTime(2022, 12, 16, 11, 9, 44, 341, DateTimeKind.Local).AddTicks(9223),
                            PetId = 1,
                            Reason = "vacunacion",
                            VeterinarianId = 2
                        },
                        new
                        {
                            Id = 13,
                            Date = new DateTime(2023, 9, 4, 10, 9, 44, 341, DateTimeKind.Local).AddTicks(9225),
                            PetId = 1,
                            Reason = "infeccion",
                            VeterinarianId = 1
                        },
                        new
                        {
                            Id = 14,
                            Date = new DateTime(2023, 2, 4, 9, 9, 44, 341, DateTimeKind.Local).AddTicks(9226),
                            PetId = 4,
                            Reason = "infeccion",
                            VeterinarianId = 2
                        },
                        new
                        {
                            Id = 15,
                            Date = new DateTime(2023, 3, 8, 10, 9, 44, 341, DateTimeKind.Local).AddTicks(9227),
                            PetId = 3,
                            Reason = "vacunacion",
                            VeterinarianId = 2
                        },
                        new
                        {
                            Id = 16,
                            Date = new DateTime(2023, 5, 7, 10, 9, 44, 341, DateTimeKind.Local).AddTicks(9228),
                            PetId = 3,
                            Reason = "terapia",
                            VeterinarianId = 2
                        },
                        new
                        {
                            Id = 17,
                            Date = new DateTime(2022, 11, 16, 10, 9, 44, 341, DateTimeKind.Local).AddTicks(9229),
                            PetId = 5,
                            Reason = "vacunacion",
                            VeterinarianId = 2
                        },
                        new
                        {
                            Id = 18,
                            Date = new DateTime(2023, 4, 5, 13, 9, 44, 341, DateTimeKind.Local).AddTicks(9232),
                            PetId = 5,
                            Reason = "vacunacion",
                            VeterinarianId = 1
                        },
                        new
                        {
                            Id = 19,
                            Date = new DateTime(2023, 1, 7, 12, 9, 44, 341, DateTimeKind.Local).AddTicks(9233),
                            PetId = 3,
                            Reason = "infeccion",
                            VeterinarianId = 1
                        },
                        new
                        {
                            Id = 20,
                            Date = new DateTime(2022, 12, 8, 12, 9, 44, 341, DateTimeKind.Local).AddTicks(9234),
                            PetId = 2,
                            Reason = "terapia",
                            VeterinarianId = 2
                        },
                        new
                        {
                            Id = 21,
                            Date = new DateTime(2023, 1, 4, 13, 9, 44, 341, DateTimeKind.Local).AddTicks(9235),
                            PetId = 2,
                            Reason = "vacunacion",
                            VeterinarianId = 1
                        },
                        new
                        {
                            Id = 22,
                            Date = new DateTime(2023, 3, 31, 14, 9, 44, 341, DateTimeKind.Local).AddTicks(9236),
                            PetId = 5,
                            Reason = "terapia",
                            VeterinarianId = 2
                        },
                        new
                        {
                            Id = 23,
                            Date = new DateTime(2023, 2, 2, 10, 9, 44, 341, DateTimeKind.Local).AddTicks(9238),
                            PetId = 4,
                            Reason = "infeccion",
                            VeterinarianId = 1
                        },
                        new
                        {
                            Id = 24,
                            Date = new DateTime(2023, 8, 18, 15, 9, 44, 341, DateTimeKind.Local).AddTicks(9239),
                            PetId = 4,
                            Reason = "infeccion",
                            VeterinarianId = 1
                        },
                        new
                        {
                            Id = 25,
                            Date = new DateTime(2023, 5, 15, 15, 9, 44, 341, DateTimeKind.Local).AddTicks(9240),
                            PetId = 3,
                            Reason = "infeccion",
                            VeterinarianId = 2
                        },
                        new
                        {
                            Id = 26,
                            Date = new DateTime(2023, 4, 19, 9, 9, 44, 341, DateTimeKind.Local).AddTicks(9242),
                            PetId = 3,
                            Reason = "vacunacion",
                            VeterinarianId = 1
                        },
                        new
                        {
                            Id = 27,
                            Date = new DateTime(2023, 3, 24, 15, 9, 44, 341, DateTimeKind.Local).AddTicks(9243),
                            PetId = 3,
                            Reason = "terapia",
                            VeterinarianId = 1
                        },
                        new
                        {
                            Id = 28,
                            Date = new DateTime(2023, 6, 10, 10, 9, 44, 341, DateTimeKind.Local).AddTicks(9244),
                            PetId = 5,
                            Reason = "vacunacion",
                            VeterinarianId = 1
                        },
                        new
                        {
                            Id = 29,
                            Date = new DateTime(2023, 9, 7, 10, 9, 44, 341, DateTimeKind.Local).AddTicks(9245),
                            PetId = 4,
                            Reason = "terapia",
                            VeterinarianId = 1
                        },
                        new
                        {
                            Id = 30,
                            Date = new DateTime(2023, 8, 11, 10, 9, 44, 341, DateTimeKind.Local).AddTicks(9247),
                            PetId = 4,
                            Reason = "infeccion",
                            VeterinarianId = 2
                        },
                        new
                        {
                            Id = 31,
                            Date = new DateTime(2023, 6, 18, 15, 9, 44, 341, DateTimeKind.Local).AddTicks(9248),
                            PetId = 3,
                            Reason = "terapia",
                            VeterinarianId = 2
                        },
                        new
                        {
                            Id = 32,
                            Date = new DateTime(2023, 2, 17, 9, 9, 44, 341, DateTimeKind.Local).AddTicks(9249),
                            PetId = 3,
                            Reason = "infeccion",
                            VeterinarianId = 2
                        },
                        new
                        {
                            Id = 33,
                            Date = new DateTime(2023, 7, 10, 11, 9, 44, 341, DateTimeKind.Local).AddTicks(9250),
                            PetId = 2,
                            Reason = "vacunacion",
                            VeterinarianId = 2
                        },
                        new
                        {
                            Id = 34,
                            Date = new DateTime(2023, 5, 26, 10, 9, 44, 341, DateTimeKind.Local).AddTicks(9253),
                            PetId = 4,
                            Reason = "terapia",
                            VeterinarianId = 2
                        },
                        new
                        {
                            Id = 35,
                            Date = new DateTime(2023, 8, 24, 10, 9, 44, 341, DateTimeKind.Local).AddTicks(9254),
                            PetId = 1,
                            Reason = "terapia",
                            VeterinarianId = 1
                        },
                        new
                        {
                            Id = 36,
                            Date = new DateTime(2022, 11, 23, 10, 9, 44, 341, DateTimeKind.Local).AddTicks(9255),
                            PetId = 3,
                            Reason = "infeccion",
                            VeterinarianId = 1
                        },
                        new
                        {
                            Id = 37,
                            Date = new DateTime(2022, 12, 26, 15, 9, 44, 341, DateTimeKind.Local).AddTicks(9256),
                            PetId = 1,
                            Reason = "terapia",
                            VeterinarianId = 1
                        },
                        new
                        {
                            Id = 38,
                            Date = new DateTime(2023, 7, 30, 11, 9, 44, 341, DateTimeKind.Local).AddTicks(9258),
                            PetId = 2,
                            Reason = "terapia",
                            VeterinarianId = 2
                        },
                        new
                        {
                            Id = 39,
                            Date = new DateTime(2023, 6, 15, 11, 9, 44, 341, DateTimeKind.Local).AddTicks(9259),
                            PetId = 5,
                            Reason = "infeccion",
                            VeterinarianId = 2
                        },
                        new
                        {
                            Id = 40,
                            Date = new DateTime(2023, 1, 25, 9, 9, 44, 341, DateTimeKind.Local).AddTicks(9260),
                            PetId = 5,
                            Reason = "infeccion",
                            VeterinarianId = 2
                        },
                        new
                        {
                            Id = 41,
                            Date = new DateTime(2023, 7, 31, 10, 9, 44, 341, DateTimeKind.Local).AddTicks(9262),
                            PetId = 4,
                            Reason = "terapia",
                            VeterinarianId = 1
                        },
                        new
                        {
                            Id = 42,
                            Date = new DateTime(2023, 5, 13, 15, 9, 44, 341, DateTimeKind.Local).AddTicks(9263),
                            PetId = 5,
                            Reason = "infeccion",
                            VeterinarianId = 1
                        },
                        new
                        {
                            Id = 43,
                            Date = new DateTime(2023, 7, 5, 10, 9, 44, 341, DateTimeKind.Local).AddTicks(9264),
                            PetId = 3,
                            Reason = "infeccion",
                            VeterinarianId = 1
                        },
                        new
                        {
                            Id = 44,
                            Date = new DateTime(2023, 4, 13, 15, 9, 44, 341, DateTimeKind.Local).AddTicks(9265),
                            PetId = 4,
                            Reason = "terapia",
                            VeterinarianId = 1
                        },
                        new
                        {
                            Id = 45,
                            Date = new DateTime(2023, 3, 1, 15, 9, 44, 341, DateTimeKind.Local).AddTicks(9267),
                            PetId = 3,
                            Reason = "terapia",
                            VeterinarianId = 2
                        },
                        new
                        {
                            Id = 46,
                            Date = new DateTime(2023, 1, 4, 9, 9, 44, 341, DateTimeKind.Local).AddTicks(9268),
                            PetId = 1,
                            Reason = "vacunacion",
                            VeterinarianId = 2
                        },
                        new
                        {
                            Id = 47,
                            Date = new DateTime(2023, 5, 10, 12, 9, 44, 341, DateTimeKind.Local).AddTicks(9295),
                            PetId = 4,
                            Reason = "infeccion",
                            VeterinarianId = 2
                        },
                        new
                        {
                            Id = 48,
                            Date = new DateTime(2023, 5, 31, 13, 9, 44, 341, DateTimeKind.Local).AddTicks(9296),
                            PetId = 5,
                            Reason = "vacunacion",
                            VeterinarianId = 2
                        },
                        new
                        {
                            Id = 49,
                            Date = new DateTime(2023, 9, 9, 13, 9, 44, 341, DateTimeKind.Local).AddTicks(9297),
                            PetId = 1,
                            Reason = "terapia",
                            VeterinarianId = 1
                        });
                });

            modelBuilder.Entity("Core.Entities.Breed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_RazaPK")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("KindId")
                        .HasColumnType("int")
                        .HasColumnName("ID_EspecieFK");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Nombre");

                    b.HasKey("Id");

                    b.HasIndex("KindId");

                    b.ToTable("Raza", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            KindId = 1,
                            Name = "tigre"
                        },
                        new
                        {
                            Id = 2,
                            KindId = 1,
                            Name = "jaguar"
                        },
                        new
                        {
                            Id = 3,
                            KindId = 1,
                            Name = "león"
                        },
                        new
                        {
                            Id = 4,
                            KindId = 2,
                            Name = "Cocodrilo"
                        },
                        new
                        {
                            Id = 5,
                            KindId = 2,
                            Name = "serpiente"
                        },
                        new
                        {
                            Id = 6,
                            KindId = 2,
                            Name = "dinosaurio"
                        },
                        new
                        {
                            Id = 7,
                            KindId = 3,
                            Name = "aguilas"
                        },
                        new
                        {
                            Id = 8,
                            KindId = 3,
                            Name = "Patos"
                        },
                        new
                        {
                            Id = 9,
                            KindId = 3,
                            Name = "Kiwis"
                        });
                });

            modelBuilder.Entity("Core.Entities.Kind", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_EspeciePK")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Nombre");

                    b.HasKey("Id");

                    b.ToTable("Especie", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "felina"
                        },
                        new
                        {
                            Id = 2,
                            Name = "reptil"
                        },
                        new
                        {
                            Id = 3,
                            Name = "ave"
                        });
                });

            modelBuilder.Entity("Core.Entities.Laboratory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_LaboratorioPK")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Direccion");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Nombre");

                    b.Property<int>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("int")
                        .HasColumnName("Telefono");

                    b.HasKey("Id");

                    b.ToTable("Laboratorio", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "centro comercial unicó",
                            Name = "Genfar",
                            PhoneNumber = 123
                        },
                        new
                        {
                            Id = 2,
                            Address = "los alamos",
                            Name = "MK",
                            PhoneNumber = 456
                        },
                        new
                        {
                            Id = 3,
                            Address = "Avenida siempre viva",
                            Name = "La Santé",
                            PhoneNumber = 789
                        });
                });

            modelBuilder.Entity("Core.Entities.MedicalTreatment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_TratamientoPk")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int")
                        .HasColumnName("ID_CitaFk");

                    b.Property<DateTime>("DateAdministration")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("FechaAdministracion");

                    b.Property<string>("Dose")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Dosis");

                    b.Property<int>("MedicineId")
                        .HasColumnType("int")
                        .HasColumnName("ID_MedicamentoFk");

                    b.Property<string>("Observation")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("Observaciones");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("MedicineId");

                    b.ToTable("TratamientoMedico", (string)null);
                });

            modelBuilder.Entity("Core.Entities.MedicationsSuppliers", b =>
                {
                    b.Property<int>("SupplierId")
                        .HasColumnType("int")
                        .HasColumnName("ID_proveedorPK");

                    b.Property<int>("MedicinesId")
                        .HasColumnType("int")
                        .HasColumnName("ID_MedicamentoPK");

                    b.HasKey("SupplierId", "MedicinesId");

                    b.HasIndex("MedicinesId");

                    b.ToTable("MedicamentosProveedores", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Medicine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_MedicamentoPK")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LaboratoryId")
                        .HasColumnType("int")
                        .HasColumnName("ID_LaboratorioFk");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Nombre");

                    b.Property<float>("Price")
                        .HasColumnType("float")
                        .HasColumnName("Precio");

                    b.Property<int>("Stock")
                        .HasColumnType("int")
                        .HasColumnName("CantidadDisponible");

                    b.HasKey("Id");

                    b.HasIndex("LaboratoryId");

                    b.ToTable("Medicamento", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LaboratoryId = 3,
                            Name = "Ampicilina",
                            Price = 12500f,
                            Stock = 14
                        },
                        new
                        {
                            Id = 2,
                            LaboratoryId = 3,
                            Name = "Hidrocortizona",
                            Price = 5500f,
                            Stock = 50
                        },
                        new
                        {
                            Id = 3,
                            LaboratoryId = 3,
                            Name = "Lorataina",
                            Price = 3300f,
                            Stock = 30
                        },
                        new
                        {
                            Id = 4,
                            LaboratoryId = 2,
                            Name = "Diclofenalco",
                            Price = 7800f,
                            Stock = 114
                        },
                        new
                        {
                            Id = 5,
                            LaboratoryId = 2,
                            Name = "Fluoxetina",
                            Price = 15500f,
                            Stock = 150
                        },
                        new
                        {
                            Id = 6,
                            LaboratoryId = 2,
                            Name = "Acetamenophen",
                            Price = 4400f,
                            Stock = 130
                        },
                        new
                        {
                            Id = 7,
                            LaboratoryId = 1,
                            Name = "Ibuprofeno",
                            Price = 10500f,
                            Stock = 114
                        },
                        new
                        {
                            Id = 8,
                            LaboratoryId = 1,
                            Name = "Omeprazol",
                            Price = 3500f,
                            Stock = 10
                        },
                        new
                        {
                            Id = 9,
                            LaboratoryId = 1,
                            Name = "Naproxeno",
                            Price = 6500f,
                            Stock = 430
                        });
                });

            modelBuilder.Entity("Core.Entities.MovementMedicine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_MovMedPK")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("Fecha");

                    b.Property<int>("MovementTypeId")
                        .HasColumnType("int")
                        .HasColumnName("ID_TipoFK");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("Cantidad");

                    b.HasKey("Id");

                    b.HasIndex("MovementTypeId");

                    b.ToTable("MovimientoMedicamento", (string)null);
                });

            modelBuilder.Entity("Core.Entities.MovementMedicineDetail", b =>
                {
                    b.Property<int>("MedicineId")
                        .HasColumnType("int")
                        .HasColumnName("ID_ProductoPK");

                    b.Property<int>("MovementMedicineId")
                        .HasColumnType("int")
                        .HasColumnName("ID_MovMedPK");

                    b.Property<float>("Price")
                        .HasColumnType("float")
                        .HasColumnName("Precio");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("Cantidad");

                    b.HasKey("MedicineId", "MovementMedicineId");

                    b.HasIndex("MovementMedicineId");

                    b.ToTable("DetalleMovimiento", (string)null);
                });

            modelBuilder.Entity("Core.Entities.MovementType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_TipoFK")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Descripcion");

                    b.HasKey("Id");

                    b.ToTable("TipoMovimiento", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Owner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_PropietarioPK")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CorreoElectronico");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Nombre");

                    b.Property<int>("PhoneNumber")
                        .HasColumnType("int")
                        .HasColumnName("Telefono");

                    b.HasKey("Id");

                    b.ToTable("Propietario", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "Propietario1@gmail.com",
                            Name = "Propietario1",
                            PhoneNumber = 1234
                        },
                        new
                        {
                            Id = 2,
                            Email = "Propietario2@gmail.com",
                            Name = "Propietario2",
                            PhoneNumber = 1234
                        },
                        new
                        {
                            Id = 3,
                            Email = "Propietario3@gmail.com",
                            Name = "Propietario3",
                            PhoneNumber = 1234
                        });
                });

            modelBuilder.Entity("Core.Entities.Pet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_MascotaPK")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("FechaNacimiento");

                    b.Property<int>("BreedId")
                        .HasColumnType("int")
                        .HasColumnName("ID_RazaFK");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Nombre");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int")
                        .HasColumnName("ID_PropietarioFK");

                    b.HasKey("Id");

                    b.HasIndex("BreedId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Mascota", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Birthdate = new DateTime(771, 4, 6, 11, 9, 44, 345, DateTimeKind.Local).AddTicks(8980),
                            BreedId = 6,
                            Name = "Barnie",
                            OwnerId = 1
                        },
                        new
                        {
                            Id = 2,
                            Birthdate = new DateTime(2023, 9, 6, 11, 9, 44, 345, DateTimeKind.Local).AddTicks(8998),
                            BreedId = 7,
                            Name = "Kus",
                            OwnerId = 2
                        },
                        new
                        {
                            Id = 3,
                            Birthdate = new DateTime(2023, 5, 29, 11, 9, 44, 345, DateTimeKind.Local).AddTicks(9003),
                            BreedId = 2,
                            Name = "Draco",
                            OwnerId = 2
                        },
                        new
                        {
                            Id = 4,
                            Birthdate = new DateTime(2023, 9, 26, 11, 9, 44, 345, DateTimeKind.Local).AddTicks(9004),
                            BreedId = 8,
                            Name = "Picote",
                            OwnerId = 2
                        },
                        new
                        {
                            Id = 5,
                            Birthdate = new DateTime(2021, 10, 6, 11, 9, 44, 345, DateTimeKind.Local).AddTicks(9005),
                            BreedId = 1,
                            Name = "Aquiles",
                            OwnerId = 3
                        },
                        new
                        {
                            Id = 6,
                            Birthdate = new DateTime(2023, 10, 1, 11, 9, 44, 345, DateTimeKind.Local).AddTicks(9006),
                            BreedId = 5,
                            Name = "Peter",
                            OwnerId = 3
                        });
                });

            modelBuilder.Entity("Core.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_RolPK")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Nombre");

                    b.HasKey("Id");

                    b.ToTable("role", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Administrator"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Manager"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Employee"
                        });
                });

            modelBuilder.Entity("Core.Entities.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_ProveedorPK")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Direccion");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Nombre");

                    b.Property<int>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("int")
                        .HasColumnName("Telefono");

                    b.HasKey("Id");

                    b.ToTable("Proveedor", (string)null);
                });

            modelBuilder.Entity("Core.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ID_UsuarioPK");

                    b.Property<string>("AccessToken")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CorreoElectronico");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("Contraseña");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("longtext");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Nombre");

                    b.HasKey("Id");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("Core.Entities.UserRoles", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("ID_RolPK");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ID_UsuarioPK");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("RolesUsuarios", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Veterinarian", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_VeterinarioPK")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CorreoElectronico");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Nombre");

                    b.Property<int>("PhoneNumber")
                        .HasColumnType("int")
                        .HasColumnName("Telefono");

                    b.Property<string>("Specialty")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Especialidad");

                    b.HasKey("Id");

                    b.ToTable("Veterinario", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "veterinarioa@gmail.com",
                            Name = "VeterinarioA",
                            PhoneNumber = 123,
                            Specialty = "Cirujano Vascular"
                        },
                        new
                        {
                            Id = 2,
                            Email = "veterinariob@gmail.com",
                            Name = "Veterinario1V",
                            PhoneNumber = 456,
                            Specialty = "Fisioterapia"
                        },
                        new
                        {
                            Id = 3,
                            Email = "veterinarioc@gmail.com",
                            Name = "Veterinario1C",
                            PhoneNumber = 7890,
                            Specialty = "Oftalmología"
                        });
                });

            modelBuilder.Entity("Core.Entities.Appointment", b =>
                {
                    b.HasOne("Core.Entities.Pet", "Pet")
                        .WithMany("Appointments")
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Veterinarian", "Veterinarian")
                        .WithMany("Appointments")
                        .HasForeignKey("VeterinarianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pet");

                    b.Navigation("Veterinarian");
                });

            modelBuilder.Entity("Core.Entities.Breed", b =>
                {
                    b.HasOne("Core.Entities.Kind", "Kind")
                        .WithMany("Breeds")
                        .HasForeignKey("KindId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kind");
                });

            modelBuilder.Entity("Core.Entities.MedicalTreatment", b =>
                {
                    b.HasOne("Core.Entities.Appointment", "Appointment")
                        .WithMany("MedicalTreatments")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Medicine", "Medicine")
                        .WithMany("MedicalTreatments")
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Medicine");
                });

            modelBuilder.Entity("Core.Entities.MedicationsSuppliers", b =>
                {
                    b.HasOne("Core.Entities.Medicine", "Medicines")
                        .WithMany("MedicationsSuppliers")
                        .HasForeignKey("MedicinesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Supplier", "Supplier")
                        .WithMany("MedicationsSuppliers")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medicines");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Core.Entities.Medicine", b =>
                {
                    b.HasOne("Core.Entities.Laboratory", "Laboratory")
                        .WithMany("Medicines")
                        .HasForeignKey("LaboratoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Laboratory");
                });

            modelBuilder.Entity("Core.Entities.MovementMedicine", b =>
                {
                    b.HasOne("Core.Entities.MovementType", "MovementType")
                        .WithMany("MovementMedicines")
                        .HasForeignKey("MovementTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MovementType");
                });

            modelBuilder.Entity("Core.Entities.MovementMedicineDetail", b =>
                {
                    b.HasOne("Core.Entities.Medicine", "Medicine")
                        .WithMany("MovementMedicineDetails")
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.MovementMedicine", "MovementMedicine")
                        .WithMany("MovementMedicineDetails")
                        .HasForeignKey("MovementMedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medicine");

                    b.Navigation("MovementMedicine");
                });

            modelBuilder.Entity("Core.Entities.Pet", b =>
                {
                    b.HasOne("Core.Entities.Breed", "Breed")
                        .WithMany("Pets")
                        .HasForeignKey("BreedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Owner", "Owner")
                        .WithMany("Pets")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Breed");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Core.Entities.UserRoles", b =>
                {
                    b.HasOne("Core.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entities.Appointment", b =>
                {
                    b.Navigation("MedicalTreatments");
                });

            modelBuilder.Entity("Core.Entities.Breed", b =>
                {
                    b.Navigation("Pets");
                });

            modelBuilder.Entity("Core.Entities.Kind", b =>
                {
                    b.Navigation("Breeds");
                });

            modelBuilder.Entity("Core.Entities.Laboratory", b =>
                {
                    b.Navigation("Medicines");
                });

            modelBuilder.Entity("Core.Entities.Medicine", b =>
                {
                    b.Navigation("MedicalTreatments");

                    b.Navigation("MedicationsSuppliers");

                    b.Navigation("MovementMedicineDetails");
                });

            modelBuilder.Entity("Core.Entities.MovementMedicine", b =>
                {
                    b.Navigation("MovementMedicineDetails");
                });

            modelBuilder.Entity("Core.Entities.MovementType", b =>
                {
                    b.Navigation("MovementMedicines");
                });

            modelBuilder.Entity("Core.Entities.Owner", b =>
                {
                    b.Navigation("Pets");
                });

            modelBuilder.Entity("Core.Entities.Pet", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("Core.Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Core.Entities.Supplier", b =>
                {
                    b.Navigation("MedicationsSuppliers");
                });

            modelBuilder.Entity("Core.Entities.User", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Core.Entities.Veterinarian", b =>
                {
                    b.Navigation("Appointments");
                });
#pragma warning restore 612, 618
        }
    }
}
