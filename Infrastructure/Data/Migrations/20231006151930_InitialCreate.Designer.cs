// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApiContext))]
    [Migration("20231006151930_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Core.Entities.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_Cita")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("Fecha");

                    b.Property<int>("PetId")
                        .HasColumnType("int")
                        .HasColumnName("ID_MascotaFk");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Motivo");

                    b.Property<int>("VeterinarianId")
                        .HasColumnType("int")
                        .HasColumnName("ID_VeterinarioFk");

                    b.HasKey("Id");

                    b.HasIndex("PetId");

                    b.HasIndex("VeterinarianId");

                    b.ToTable("Cita", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Breed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_RazaPK")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("KindId")
                        .HasColumnType("int")
                        .HasColumnName("ID_EspecieFK");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Nombre");

                    b.HasKey("Id");

                    b.HasIndex("KindId");

                    b.ToTable("Raza", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Kind", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_EspeciePK")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Nombre");

                    b.HasKey("Id");

                    b.ToTable("Especie", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Laboratory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_LaboratorioPK")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Direccion");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Nombre");

                    b.Property<int>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("int")
                        .HasColumnName("Telefono");

                    b.HasKey("Id");

                    b.ToTable("Laboratorio", (string)null);
                });

            modelBuilder.Entity("Core.Entities.MedicalTreatment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_TratamientoPk")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int")
                        .HasColumnName("ID_CitaFk");

                    b.Property<DateTime>("DateAdministration")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("FechaAdministracion");

                    b.Property<string>("Dose")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Dosis");

                    b.Property<int>("MedicineId")
                        .HasColumnType("int")
                        .HasColumnName("ID_MedicamentoFk");

                    b.Property<string>("Observation")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("Observaciones");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("MedicineId");

                    b.ToTable("TratamientoMedico", (string)null);
                });

            modelBuilder.Entity("Core.Entities.MedicationsSuppliers", b =>
                {
                    b.Property<int>("SupplierId")
                        .HasColumnType("int")
                        .HasColumnName("ID_proveedorPK");

                    b.Property<int>("MedicinesId")
                        .HasColumnType("int")
                        .HasColumnName("ID_MedicamentoPK");

                    b.HasKey("SupplierId", "MedicinesId");

                    b.HasIndex("MedicinesId");

                    b.ToTable("MedicamentosProveedores", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Medicine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_MedicamentoPK")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LaboratoryId")
                        .HasColumnType("int")
                        .HasColumnName("ID_LaboratorioFk");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Nombre");

                    b.Property<float>("Price")
                        .HasColumnType("float")
                        .HasColumnName("Precio");

                    b.Property<int>("Stock")
                        .HasColumnType("int")
                        .HasColumnName("CantidadDisponible");

                    b.HasKey("Id");

                    b.HasIndex("LaboratoryId");

                    b.ToTable("Medicamento", (string)null);
                });

            modelBuilder.Entity("Core.Entities.MovementMedicine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_MovMedPK")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("Fecha");

                    b.Property<int>("MovementTypeId")
                        .HasColumnType("int")
                        .HasColumnName("ID_TipoFK");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("Cantidad");

                    b.HasKey("Id");

                    b.HasIndex("MovementTypeId");

                    b.ToTable("MovimientoMedicamento", (string)null);
                });

            modelBuilder.Entity("Core.Entities.MovementMedicineDetail", b =>
                {
                    b.Property<int>("MedicineId")
                        .HasColumnType("int")
                        .HasColumnName("ID_ProductoPK");

                    b.Property<int>("MovementMedicineId")
                        .HasColumnType("int")
                        .HasColumnName("ID_MovMedPK");

                    b.Property<float>("Price")
                        .HasColumnType("float")
                        .HasColumnName("Precio");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("Cantidad");

                    b.HasKey("MedicineId", "MovementMedicineId");

                    b.HasIndex("MovementMedicineId");

                    b.ToTable("DetalleMovimiento", (string)null);
                });

            modelBuilder.Entity("Core.Entities.MovementType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_TipoFK")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Descripcion");

                    b.HasKey("Id");

                    b.ToTable("TipoMovimiento", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Owner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_PropietarioPK")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CorreoElectronico");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Nombre");

                    b.Property<int>("PhoneNumber")
                        .HasColumnType("int")
                        .HasColumnName("Telefono");

                    b.HasKey("Id");

                    b.ToTable("Propietario", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Pet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_MascotaPK")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("FechaNacimiento");

                    b.Property<int>("BreedId")
                        .HasColumnType("int")
                        .HasColumnName("ID_RazaFK");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Nombre");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int")
                        .HasColumnName("ID_PropietarioFK");

                    b.HasKey("Id");

                    b.HasIndex("BreedId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Mascota", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_RolPK")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Nombre");

                    b.HasKey("Id");

                    b.ToTable("role", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Administrator"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Manager"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Employee"
                        });
                });

            modelBuilder.Entity("Core.Entities.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_ProveedorPK")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Direccion");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Nombre");

                    b.Property<int>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("int")
                        .HasColumnName("Telefono");

                    b.HasKey("Id");

                    b.ToTable("Proveedor", (string)null);
                });

            modelBuilder.Entity("Core.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ID_UsuarioPK");

                    b.Property<string>("AccessToken")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CorreoElectronico");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("Contraseña");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("longtext");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Nombre");

                    b.HasKey("Id");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("Core.Entities.UserRoles", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("ID_RolPK");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ID_UsuarioPK");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("RolesUsuarios", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Veterinarian", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_VeterinarioPK")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CorreoElectronico");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Nombre");

                    b.Property<int>("PhoneNumber")
                        .HasColumnType("int")
                        .HasColumnName("Telefono");

                    b.Property<string>("Specialty")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Especialidad");

                    b.HasKey("Id");

                    b.ToTable("Veterinario", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Appointment", b =>
                {
                    b.HasOne("Core.Entities.Pet", "Pet")
                        .WithMany("Appointments")
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Veterinarian", "Veterinarian")
                        .WithMany("Appointments")
                        .HasForeignKey("VeterinarianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pet");

                    b.Navigation("Veterinarian");
                });

            modelBuilder.Entity("Core.Entities.Breed", b =>
                {
                    b.HasOne("Core.Entities.Kind", "Kind")
                        .WithMany("Breeds")
                        .HasForeignKey("KindId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kind");
                });

            modelBuilder.Entity("Core.Entities.MedicalTreatment", b =>
                {
                    b.HasOne("Core.Entities.Appointment", "Appointment")
                        .WithMany("MedicalTreatments")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Medicine", "Medicine")
                        .WithMany("MedicalTreatments")
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Medicine");
                });

            modelBuilder.Entity("Core.Entities.MedicationsSuppliers", b =>
                {
                    b.HasOne("Core.Entities.Medicine", "Medicines")
                        .WithMany("MedicationsSuppliers")
                        .HasForeignKey("MedicinesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Supplier", "Supplier")
                        .WithMany("MedicationsSuppliers")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medicines");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Core.Entities.Medicine", b =>
                {
                    b.HasOne("Core.Entities.Laboratory", "Laboratory")
                        .WithMany("Medicines")
                        .HasForeignKey("LaboratoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Laboratory");
                });

            modelBuilder.Entity("Core.Entities.MovementMedicine", b =>
                {
                    b.HasOne("Core.Entities.MovementType", "MovementType")
                        .WithMany("MovementMedicines")
                        .HasForeignKey("MovementTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MovementType");
                });

            modelBuilder.Entity("Core.Entities.MovementMedicineDetail", b =>
                {
                    b.HasOne("Core.Entities.Medicine", "Medicine")
                        .WithMany("MovementMedicineDetails")
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.MovementMedicine", "MovementMedicine")
                        .WithMany("MovementMedicineDetails")
                        .HasForeignKey("MovementMedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medicine");

                    b.Navigation("MovementMedicine");
                });

            modelBuilder.Entity("Core.Entities.Pet", b =>
                {
                    b.HasOne("Core.Entities.Breed", "Breed")
                        .WithMany("Pets")
                        .HasForeignKey("BreedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Owner", "Owner")
                        .WithMany("Pets")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Breed");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Core.Entities.UserRoles", b =>
                {
                    b.HasOne("Core.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entities.Appointment", b =>
                {
                    b.Navigation("MedicalTreatments");
                });

            modelBuilder.Entity("Core.Entities.Breed", b =>
                {
                    b.Navigation("Pets");
                });

            modelBuilder.Entity("Core.Entities.Kind", b =>
                {
                    b.Navigation("Breeds");
                });

            modelBuilder.Entity("Core.Entities.Laboratory", b =>
                {
                    b.Navigation("Medicines");
                });

            modelBuilder.Entity("Core.Entities.Medicine", b =>
                {
                    b.Navigation("MedicalTreatments");

                    b.Navigation("MedicationsSuppliers");

                    b.Navigation("MovementMedicineDetails");
                });

            modelBuilder.Entity("Core.Entities.MovementMedicine", b =>
                {
                    b.Navigation("MovementMedicineDetails");
                });

            modelBuilder.Entity("Core.Entities.MovementType", b =>
                {
                    b.Navigation("MovementMedicines");
                });

            modelBuilder.Entity("Core.Entities.Owner", b =>
                {
                    b.Navigation("Pets");
                });

            modelBuilder.Entity("Core.Entities.Pet", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("Core.Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Core.Entities.Supplier", b =>
                {
                    b.Navigation("MedicationsSuppliers");
                });

            modelBuilder.Entity("Core.Entities.User", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Core.Entities.Veterinarian", b =>
                {
                    b.Navigation("Appointments");
                });
#pragma warning restore 612, 618
        }
    }
}
